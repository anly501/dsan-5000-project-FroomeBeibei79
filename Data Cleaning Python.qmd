---
jupyter: python3
---

# Data cleaning in text data
First I use NewsAPI to get text data from NewsAPI on different key words in terms of driver behavior analysis

The key words I used are: driving behavior, distracted driving, driver risk assessment, driver profilling

```{.python .hide}
import requests
import json
import re
import os
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer

baseURL = "https://newsapi.org/v2/everything?"
total_requests=1
verbose=True

API_KEY='2133663c4ec54af8a9839f0c500203de'
TOPIC1 = 'driver profiling'

URLpost1 = {'apiKey': API_KEY,
            'q': '+'+TOPIC1,
            'sortBy': 'relevancy',
            'totalRequests': 1}

print(baseURL)

response1 = requests.get(baseURL, URLpost1) 

response1 = response1.json() 

print(json.dumps(response1, indent=2))

from datetime import datetime
timestamp = datetime.now().strftime("%Y-%m-%d-H%H-M%M-S%S")

output_file_path = os.path.join("data", f'{timestamp}-topic1-newapi-raw-data-driver-profilling.json')

with open(output_file_path, 'w') as outfile:
    json.dump(response1, outfile, indent=4)
```


# Data Cleaning for EDA

```{.python .hide}

import csv
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

accident = pd.read_csv('Data/FARS2021NationalCSV/accident.csv', encoding='ISO-8859-1')
event = pd.read_csv('Data/FARS2021NationalCSV/cevent.csv', encoding='ISO-8859-1')
accident.columns = accident.columns.str.strip()
event.columns = event.columns.str.strip()

accident_columns_to_drop = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
                   36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
                   64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]

# Drop the specified columns by index
accident = accident.drop(accident.columns[accident_columns_to_drop], axis=1)

event_columns_to_drop = [9, 10, 11, 12]
event = event.drop(event.columns[event_columns_to_drop], axis = 1)

df = pd.merge(accident, event, on='ST_CASE', how='inner')
df = df.drop(columns=['STATE_y', 'STATENAME_y'])


numerical_vars = df.select_dtypes(include=[np.number])
numerical_summary = numerical_vars.describe()

# Calculate variance for numerical variables (since it's not included in the describe method by default)
variance = numerical_vars.var()

# Add variance to the summary statistics
numerical_summary.loc['variance'] = variance

numerical_summary

sns.set_style("whitegrid")

# Function to create bar plots for categorical variables
def plot_categorical_distribution(data, column_name, plot_size=(10, 6), rotation_angle=90):
    plt.figure(figsize=plot_size)
    ax = sns.countplot(data=data, y=column_name, order=data[column_name].value_counts().index,  palette="husl")
    ax.set_title(f'Crash Distribution Summary of {column_name}', fontsize=15)
    ax.set_ylabel(column_name, fontsize=12)
    ax.set_xlabel('Count', fontsize=12)
    plt.xticks(rotation=rotation_angle)
    plt.show()

# Plot the distribution of STATENAME_x
plot_categorical_distribution(df, 'STATENAME_x')

plot_categorical_distribution(df, 'DAY_WEEKNAME', rotation_angle=0)


plot_categorical_distribution(df, 'AOI1NAME', plot_size=(10, 8))


# Calculate the correlation matrix for the numerical variables Step 4
correlation_matrix = numerical_vars.corr()

correlation_matrix

# Set the size of the plot
plt.figure(figsize=(10, 8))

# Create a heatmap to visualize the correlation matrix
ax = sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap="coolwarm", vmin=-1, vmax=1)

# Set the title and show the plot
ax.set_title('Correlation Matrix', fontsize=15)
plt.show()


# Convert HOUR from numeric to categorical to better handle the 99 (unknown) values
df['HOUR'] = df['HOUR'].astype(str).replace('99', 'Unknown')

# Create a pivot table to count the number of entries for each combination of DAY_WEEKNAME and HOUR
hour_weekday_pivot = pd.pivot_table(df, index='DAY_WEEKNAME', columns='HOUR', aggfunc='size', fill_value=0)

# Order the days of the week
days_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
hour_weekday_pivot = hour_weekday_pivot.reindex(days_order)

# Create the heatmap
plt.figure(figsize=(15, 7))
ax = sns.heatmap(hour_weekday_pivot, cmap="YlGnBu", linewidths=.5)

# Set the title and labels
ax.set_title('Number of Entries by Day of the Week and Hour of the Day', fontsize=15)
ax.set_xlabel('Hour of the Day', fontsize=12)
ax.set_ylabel('Day of the Week', fontsize=12)

plt.show()

# Group the data by state and calculate the total number of entries for each state
state_group = df.groupby('STATENAME_x').size().sort_values(ascending=False)

state_group

# Set the size of the plot
plt.figure(figsize=(12, 8))

# Create a bar plot for the number of entries by state
ax = sns.barplot(x=state_group.index, y=state_group.values, palette="husl")

# Set the title and labels
ax.set_title('Number of Entries by State', fontsize=15)
ax.set_xlabel('State', fontsize=12)
ax.set_ylabel('Number of Entries', fontsize=12)
plt.xticks(rotation=90)

# Show the plot
plt.show()

# Convert HOUR back to numeric, treating "Unknown" as a missing value
df['HOUR'] = pd.to_numeric(df['HOUR'], errors='coerce')

# Define a function to categorize the time of day
def categorize_time_of_day(hour):
    if pd.isna(hour):
        return "Unknown"
    elif 6 <= hour < 12:
        return "Morning"
    elif 12 <= hour < 18:
        return "Afternoon"
    elif 18 <= hour < 24:
        return "Evening"
    else:
        return "Night"

# Apply the function to create a new variable "TIME_OF_DAY"
df['TIME_OF_DAY'] = df['HOUR'].apply(categorize_time_of_day)

# Group the data by "TIME_OF_DAY" and calculate the total number of entries for each time segment
time_of_day_group = df.groupby('TIME_OF_DAY').size().sort_index()

time_of_day_group

# Set the size of the plot
plt.figure(figsize=(10, 6))

# Create a bar plot for the number of entries by time of day
ax = sns.barplot(x=time_of_day_group.index, y=time_of_day_group.values, palette="husl")

# Set the title and labels
ax.set_title('Number of Entries by Time of Day', fontsize=15)
ax.set_xlabel('Time of Day', fontsize=12)
ax.set_ylabel('Number of Entries', fontsize=12)

# Show the plot
plt.show()



# Set the size of the plots
plt.figure(figsize=(15, 10))

# Create box plots for the numerical variables
for i, column in enumerate(numerical_vars.columns, 1):
    plt.subplot(3, 3, i)
    sns.boxplot(x=df[column])
    plt.title(column)

plt.tight_layout()
plt.show()

```

# Data Cleaning in NB Progress
